[
   "cluster.disconnect([callback])",
   "crypto.pbkdf2(password, salt, iterations, keylen, digest, callback)",
   "crypto.randomBytes(size[, callback])",
   "dns.lookup(hostname[, options], callback)",
   "dns.lookupService(address, port, callback)",
   "dns.resolve(hostname[, rrtype], callback)",
   "dns.resolve4(hostname, callback)",
   "dns.resolve6(hostname, callback)",
   "dns.resolveCname(hostname, callback)",
   "dns.resolveMx(hostname, callback)",
   "dns.resolveNs(hostname, callback)",
   "dns.resolveSoa(hostname, callback)",
   "dns.resolveSrv(hostname, callback)",
   "dns.resolvePtr(hostname, callback)",
   "dns.resolveTxt(hostname, callback)",
   "dns.reverse(ip, callback)",
   "fs.access(path[, mode], callback)",
   "fs.appendFile(file, data[, options], callback)",
   "fs.chmod(path, mode, callback)",
   "fs.chown(path, uid, gid, callback)",
   "fs.close(fd, callback)",
   "fs.exists(path, callback)",
   "fs.fchmod(fd, mode, callback)",
   "fs.fchown(fd, uid, gid, callback)",
   "fs.fdatasync(fd, callback)",
   "fs.fstat(fd, callback)",
   "fs.fsync(fd, callback)",
   "fs.ftruncate(fd, len, callback)",
   "fs.futimes(fd, atime, mtime, callback)",
   "fs.lchmod(path, mode, callback)",
   "fs.lchown(path, uid, gid, callback)",
   "fs.link(srcpath, dstpath, callback)",
   "fs.lstat(path, callback)",
   "fs.mkdir(path[, mode], callback)",
   "fs.mkdtemp(prefix, callback)",
   "fs.open(path, flags[, mode], callback)",
   "fs.read(fd, buffer, offset, length, position, callback)",
   "fs.readdir(path[, options], callback)",
   "fs.readFile(file[, options], callback)",
   "fs.readlink(path[, options], callback)",
   "fs.realpath(path[, options], callback)",
   "fs.rename(oldPath, newPath, callback)",
   "fs.rmdir(path, callback)",
   "fs.stat(path, callback)",
   "fs.symlink(target, path[, type], callback)",
   "fs.truncate(path, len, callback)",
   "fs.unlink(path, callback)",
   "fs.utimes(path, atime, mtime, callback)",
   "fs.write(fd, buffer, offset, length[, position], callback)",
   "fs.write(fd, data[, position[, encoding]], callback)",
   "fs.writeFile(file, data[, options], callback)",
   "setImmediate(callback[, arg][, ...])",
   "setInterval(callback, delay[, arg][, ...])",
   "setTimeout(callback, delay[, arg][, ...])",
   "agent.createConnection(options[, callback])",
   "request.end([data][, encoding][, callback])",
   "request.setTimeout(timeout[, callback])",
   "request.write(chunk[, encoding][, callback])",
   "server.close([callback])",
   "server.listen(handle[, callback])",
   "server.listen(path[, callback])",
   "server.listen(port[, hostname][, backlog][, callback])",
   "server.setTimeout(msecs, callback)",
   "response.end([data][, encoding][, callback])",
   "response.setTimeout(msecs, callback)",
   "response.write(chunk[, encoding][, callback])",
   "message.setTimeout(msecs, callback)",
   "http.get(options[, callback])",
   "http.request(options[, callback])",
   "server.listen(port[, host][, backlog][, callback])",
   "https.get(options, callback)",
   "https.request(options, callback)",
   "process.nextTick(callback[, arg][, ...])",
   "process.send(message[, sendHandle[, options]][, callback])",
   "server.listen(port[, hostname][, callback])",
   "tlsSocket.renegotiate(options, callback)",
   "tls.connect(options[, callback])",
   "tls.connect(port[, host][, options][, callback])",
   "socket.bind([port][, address][, callback])",
   "socket.bind(options[, callback])",
   "socket.close([callback])",
   "socket.send(msg, [offset, length,] port, address[, callback])",
   "dgram.createSocket(options[, callback])",
   "dgram.createSocket(type[, callback])",
   "zlib.flush([kind], callback)",
   "zlib.params(level, strategy, callback)",
   "zlib.deflate(buf[, options], callback)",
   "zlib.deflateRaw(buf[, options], callback)",
   "zlib.gunzip(buf[, options], callback)",
   "zlib.gzip(buf[, options], callback)",
   "zlib.inflate(buf[, options], callback)",
   "zlib.inflateRaw(buf[, options], callback)",
   "zlib.unzip(buf[, options], callback)"
]